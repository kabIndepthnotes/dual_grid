@code_type c .c
@comment_type /* %s */
@compiler gcc collision_tiles.c

@title adding collision to the tiles.

@s adding collision to the tiles
With our grid, I need to visualise the collision rectangles.
The collision rectangles will probably be calculated at runtime, from the `tilemap_tileset_0` array.
I need to think of the datastructure that the collision rectangles will be.
We don't know how many there will be, They will each be a fixed size.
Once they are initialised then I don't need to add, take away or insert rectangles, but instead start afresh for a new room.
This can be done during a compile step, we could just write a programm that creates this collision rect code.

--- collision_tiles.c
/* If you are using lit to compile, do not edit this file (collision_tiles.c) directly as it will be overwritten in the main.lit compile process */
@{include_directives}
/* @{define_directives} */
/* @{type_definitions} */
/* @{external_variables} */
/* @{function_prototypes} */
int
main(void)
{
	/* @{debug_variables} */
	int travelled_tiles[22][40] = {0};
	printf("Rectangle rects[] = \n{\n");
	@{main_loop}
	/* @{debug_print} */

	printf("(Rectangle) {0}// redundant can delete\n};\n");
	return 0;
}

/* @{function_definitions} */
---

--- include_directives
#include <stdio.h>
#include "tilemap.h"
#include <stdbool.h>
---

travelled tile should have a skip ahead number for easy optimisation.

--- skip_seen_tiles
if (travelled_tiles[y][x] != 0) {
	x += travelled_tiles[y][x] - 1; // as the for loop increments as well, we add minus 1 here
	continue;
}
---

I am deciding to go row by row along the array, and make rectangles as large as possible, first to the right, and then down.
--- main_loop
for (int y = 0; y < 22; y++) {
	for (int x = 0; x < 40; x++) {
		@{skip_seen_tiles}
		int travel_x = 1;
		int travel_y = 1;
		if (tilemap_tileset_0[y][x] == 1) {
			@{go_right_as_far_as_possible}
			/* printf("travel_x = %d, x = %d, y = %d\n", travel_x, x, y ); */
			@{see_how_tall_the_widest_rectangle_is}
			end_loop:
			printf("(Rectangle) {%d,%d,%d,%d},\n", x*32, y*32, travel_x*32, travel_y*32);
			x+= travel_x - 1;
		}
	}
}
---

--- go_right_as_far_as_possible
bool is_in_bounds;
bool is_tile_solid;
bool is_travelled_before;
for (;;) {
	is_in_bounds = x + travel_x < 40;
	is_tile_solid = tilemap_tileset_0[y][x + travel_x] == 1;
	is_travelled_before = travelled_tiles[y][x + travel_x] != 0;

	if (is_in_bounds && is_tile_solid && !(is_travelled_before)) {
		travel_x++;
	}
	else {
		break;
	}

}
travelled_tiles[y][x] = travel_x; //que to jump ahead travel_x
---

--- go_right_as_far_as_possible_2
bool is_in_bounds = x + travel_x < 40;
bool is_tile_solid = tilemap_tileset_0[y][x + travel_x] == 1;
bool is_travelled_before = travelled_tiles[y][x + travel_x] != 0;

while (is_in_bounds && is_tile_solid && !(is_travelled_before)) {
	travel_x++;

	is_in_bounds = x + travel_x < 40;
	is_tile_solid = tilemap_tileset_0[y][x + travel_x] == 1;
	is_travelled_before = travelled_tiles[y][x + travel_x] != 0;
}
travelled_tiles[y][x] = travel_x; //que to jump ahead travel_x
---

--- see_how_tall_the_widest_rectangle_is
while (tilemap_tileset_0[y + travel_y][x] == 1 && y + travel_y < 22) {
	for (int tx = 0; tx < travel_x; tx++) { // check line is solid
		bool is_hole = tilemap_tileset_0[y + travel_y][x + tx] != 1;
		bool is_travelled_before = travelled_tiles[y + travel_y][x + tx] != 0;
		if ( is_hole || is_travelled_before ) {
			goto end_loop;
		}
	}
	travelled_tiles[y + travel_y][x] = travel_x; //que to jump ahead travel_x
	travel_y++;
}
---


--- debug_variables
int tilemap_tileset_0[22][40] = {
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1},
{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},
{0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0},
{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0},
{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},
{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0},
{0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0},
{0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0}};
---

--- debug_print
for (int j = 0; j < 22; j++) {
	for (int i = 0; i < 40; i++) {
		printf("%d ", travelled_tiles[j][i]);
	}
	printf("\n");
}
---

